from pwn import *
bts = b'\x23\x38\x41\x24\x43\x54\x24\x43\x54\x73\x24\x38\x38\x41\x43\x27\x41\x24\x43\x54\x73\x24\x38\x38\x23\x51\x43\x43\x43\x54\x73\x23\x24\x41\x24\x38\x43\x43\x54\x73\x23\x38\x38\x51\x43\x43\x24\x43\x54\x73\x23\x38\x38\x43\x43\x54\x22\x41\x73\x21\x62\x94\x01\x62\xb2\x01\x62\x84\x01\x39\x05\x3f\x11\xf4\xff\x29\x57\x81\x0e\x40\x65\x03\x00\x32\x53\x32\x3a\x39\x5e\x57\xf3\xb4\xa3\x8c\x7f\xba\x07\x40\x65\x03\x00\x31\x53\x31\x3a\x62\x67\x01\x62\x85\x01\x62\x57\x01\x39\xb7\x73\x80\xe1\xb0\x72\x87\xf2\x03\x40\x65\x03\x00\x32\x53\x32\x3a\x39\x3f\x68\xa3\xe4\x04\x9a\x3b\x8f\x07\x40\x65\x03\x00\x31\x53\x31\x3a\x62\x3a\x01\x62\x58\x01\x62\x2a\x01\x39\x54\x27\xb5\xb6\x95\x52\x5d\xcd\x0b\x40\x65\x03\x00\x32\x53\x32\x3a\x39\x28\x91\x9a\x4a\xa2\x71\x37\x91\x07\x40\x65\x03\x00\x31\x53\x31\x3a\x62\x0d\x01\x62\x2b\x01\x62\xfd\x00\x39\xa3\x86\x14\x05\x41\x8c\x74\xe5\x0b\x40\x65\x03\x00\x32\x53\x32\x3a\x39\xbc\x61\xed\xf2\xe9\x6e\xc1\xab\x06\x40\x65\x03\x00\x31\x53\x31\x3a\x62\xe0\x00\x62\xfe\x00\x62\xd0\x00\x39\x88\x92\x3a\xe0\x69\x3f\x54\x92\x06\x40\x65\x03\x00\x32\x53\x32\x3a\x39\x0f\xd1\xbe\xe3\x39\xa1\x96\xc5\x05\x40\x65\x03\x00\x31\x53\x31\x3a\x62\xb3\x00\x62\xd1\x00\x62\xa3\x00\x39\x83\xea\x7b\x97\xe5\x4c\xd3\xea\x06\x40\x65\x03\x00\x32\x53\x32\x3a\x39\x87\xef\xb0\xd1\x5c\xfe\x86\xad\x04\x40\x65\x03\x00\x31\x53\x31\x3a\x62\x86\x00\x62\xa4\x00\x62\x76\x00\x39\x19\x42\x6c\xd4\xca\xf6\xf2\xd9\x09\x40\x65\x03\x00\x32\x53\x32\x3a\x39\xef\xff\xda\x15\x13\xea\xae\xdb\x06\x40\x65\x03\x00\x31\x53\x31\x3a\x62\x59\x00\x62\x77\x00\x62\x49\x00\x39\xfe\x13\x97\xdf\xcd\x12\x7e\xf0\x0a\x40\x65\x03\x00\x32\x53\x32\x3a\x39\x1c\xaf\xcf\x1f\x96\x45\x41\xa5\x06\x40\x65\x03\x00\x31\x53\x31\x3a\x72\x23\x38\x43\x25\x41\x24\x38\x43\x43\x54\x64\x05\x00\x3a\x3a\x63\x7d\x00\x3a\x39\x5a\x88\x34\x14\xa0\xc3\x05\xbd\xfe\x3f\x64\x8e\x00\x63\x6b\x00\x32\x38\x32\x38\x32\x43\x32\x41\x32\x61\x72\x62\x42\x00\x72\x62\x3e\x00\x22\x22\x41\x23\x43\x43\x24\x38\x41\x54\x24\x38\x43\x43\x54\x24\x43\x54\x44\x38\x52\x42\x43\x31\x61\x72\x62\x21\x00\x72\x62\x1d\x00\x22\x22\x41\x23\x43\x43\x24\x38\x41\x54\x24\x38\x43\x43\x54\x24\x43\x54\x44\x38\x53\x22\x41\x31\x52\x43\x43\x31\x61\x31\x23\x38\x43\x23\x43\x54\x22\x41\x67\x0f\x00\x24\x38\x43\x24\x43\x25\x41\x24\x43\x54\x68\x02\x00\x31\x61\x23\x25\x43\x24\x41\x23\x38\x43\x43\x54\x73\x23\x24\x41\x24\x38\x43\x43\x54\x73\x22\x23\x41\x24\x38\x43\x43\x54\x73\x63\x21\x00\x23\x22\x45\x41\x24\x38\x38\x43\x43\x43\x54\x73\x24\x38\x26\x23\x41\x24\x41\x43\x43\x54\x73\x23\x38\x43\x24\x43\x54\x73\x63\x00\x00\x23\x38\x43\x54\x73\x71\x00'

k = []

i = 0
while i < len(bts):
    b = bts[i]
    print(i, f'({hex(b)})', end=': ')
    if b == 0x23:
        print('push PI')
    elif b == 0x38:
        print('ST[7] = ST[0]')
        print('\tSTP--')
    elif b == 0x41:
        print('ST[1] = ST[0] + ST[1]')
        print('\tSTP++')
    elif b == 0x42:
        print('ST[1] = ST[0] - ST[1]')
        print('\tSTP++')
    elif b == 0x43:
        print('ST[1] = ST[0] * ST[1]')
        print('\tSTP++')
    elif b == 0x44:
        print('ST[1] = ST[0] / ST[1]')
        print('\tSTP++')
    elif b == 0x24:
        print('push log2(10)')
    elif b == 0x54:
        print('ST[0] = round(ST[0])')
    elif b == 0x73:
        print('put(round(ST[0]))')
        print('\tSTP++')
    elif b == 0x27:
        print('push logE(2)')
    elif b == 0x26:
        print('push log10(2)')
    elif b == 0x25:
        print('push log2(e)')
    elif b == 0x22:
        print('push 1')
    elif b == 0x32:
        print('swap ST[2], ST[0]')
    elif b == 0x31:
        print('swap ST[1], ST[0]')
    elif b == 0x53:
        print('ST[0] = cos(ST[0])')
    elif b == 0x52:
        print('ST[0] = sin(ST[0])')
    elif b == 0x51:
        print('ST[0] = sqrt(ST[0])')
    elif b == 0x61:
        print('jmp ST[0]; STP++')
    elif b == 0x72:
        print('push get()')
    elif b == 0x45:
        print('ST[0] = -ST[0]')
    elif b == 0x21:
        print('push 0')
    elif b == 0x62:
        print('push RIP')
        print(f'\tjmp {u16(bts[i+1:i+3]) + i + 3}')
        i += 2
    elif b == 0x39:
        v = bts[i+1:i+11]
        print(f'push const {v.hex()}')
        i += 10
    elif b == 0x64:
        print(f'jmp {u16(bts[i+1:i+3]) + i + 3} if ST[0] == ST[1]; STP++')
        i += 2
    elif b == 0x3a:
        print('pop')
    elif b == 0x63:
        print(f'jmp {u16(bts[i+1:i+3]) + i + 3}')
        i += 2
    elif b == 0x65:
        print(f'jmp {u16(bts[i+1:i+3]) + i + 3} if ST[0] != ST[1]; STP++')
        i += 2
    elif b == 0x67:
        print(f'jmp {u16(bts[i+1:i+3]) + i + 3} if ST[0] > ST[1]; STP++')
        i += 2
    elif b == 0x68:
        print(f'jmp {u16(bts[i+1:i+3]) + i + 3} if ST[0] <= ST[1]; STP++')
        i += 2
    elif b == 0x71:
        print('exit')
    else:
        print('idk -->', hex(b))

    i += 1
